import _assertThisInitialized from "@babel/runtime/helpers/builtin/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/builtin/inheritsLoose";
import _throttle from "lodash/throttle";
// Copyright 2018 Kensho Technologies, LLC.
import * as React from 'react';
import PropTypes from 'prop-types';
// this component wraps <BaseComponent /> and adds a width prop when it's not present
export default function chartWidthHOC(BaseComponent) {
  var _class, _temp2;

  return _temp2 = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(ChartWidthHOC, _React$Component);

    function ChartWidthHOC() {
      var _temp, _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_temp = _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this, _this.state = {}, _this.handleResize = _throttle(function () {
        return _this.updateWidth();
      }, 500), _this.handleRef = function (divNode) {
        _this.divNode = divNode;
      }, _temp) || _assertThisInitialized(_this);
    }

    var _proto = ChartWidthHOC.prototype;

    _proto.componentDidMount = function componentDidMount() {
      window.addEventListener('resize', this.handleResize);
      this.updateWidth();
    };

    _proto.componentWillReceiveProps = function componentWillReceiveProps() {
      this.updateWidth();
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize);
    };

    _proto.updateWidth = function updateWidth() {
      if (this.divNode && !this.props.width) {
        var width = this.divNode.clientWidth;

        if (this.state.width !== width) {
          this.setState({
            width: width
          });
        }
      }
    };

    _proto.render = function render() {
      return React.createElement("div", {
        ref: this.handleRef
      }, React.createElement(BaseComponent, Object.assign({}, this.state, this.props)));
    };

    return ChartWidthHOC;
  }(React.Component), _class.propTypes = {
    width: PropTypes.number
  }, _class.displayName = 'ChartWidthHOC', _temp2;
}