import _objectWithoutProperties from "@babel/runtime/helpers/builtin/objectWithoutProperties";
import _assertThisInitialized from "@babel/runtime/helpers/builtin/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/builtin/inheritsLoose";
// Copyright 2018 Kensho Technologies, LLC.
import * as React from 'react';
import PropTypes from 'prop-types';

var BlockSize =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(BlockSize, _React$Component);

  function BlockSize() {
    var _temp, _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_temp = _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this, _this.elementRef = function (ref) {
      _this.element = ref;
    }, _temp) || _assertThisInitialized(_this);
  }

  var _proto = BlockSize.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.update();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.update();
  };

  _proto.update = function update() {
    if (!this.element) return;
    this.props.onUpdate(Object.assign({}, this.props, {
      width: this.element.offsetWidth,
      height: this.element.offsetHeight
    }));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        onUpdate = _this$props.onUpdate,
        onState = _this$props.onState,
        rest = _objectWithoutProperties(_this$props, ["onUpdate", "onState"]);

    return React.createElement("div", Object.assign({}, rest, {
      ref: this.elementRef
    }));
  };

  return BlockSize;
}(React.Component);

export { BlockSize as default };
BlockSize.propTypes = process.env.NODE_ENV !== "production" ? {
  onState: PropTypes.func,
  onUpdate: PropTypes.func.isRequired
} : {};