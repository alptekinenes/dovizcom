import _reduce from "lodash/reduce";
import _each from "lodash/each";
var serializer = typeof window === 'object' && new XMLSerializer();

var serializeNodeList = function serializeNodeList(nodeList) {
  return _reduce(nodeList, function (acc, node) {
    return acc + serializer.serializeToString(node);
  }, '');
};
/**
 * Renders a DOM node to a dataURL source, which can be used to generate a
 * downloadable image. The size of the node is used for setting the size of the
 * rendered image.
 * @example
 * generateSrc(
 *   node,
 *   dataURL => downloadImg(dataURL),
 * )
 */


export function generateSrc(clbck, node, multiplier) {
  if (multiplier === void 0) {
    multiplier = 1;
  }

  var width = node.scrollWidth;
  var height = node.scrollHeight;
  var cloned = node.cloneNode(true);
  var canvasNodes = node.querySelectorAll('canvas');
  var styleNodes = document.querySelectorAll('style');

  _each(cloned.querySelectorAll('canvas'), function (cloneCanvas, idx) {
    var canvas = canvasNodes[idx];
    var img = document.createElement('img');
    img.src = canvas.toDataURL('image/png');
    img.setAttribute('style', canvas.getAttribute('style'));
    img.setAttribute('width', canvas.getAttribute('width') + " px");
    img.setAttribute('height', canvas.getAttribute('height') + " px");
    cloneCanvas.parentNode.replaceChild(img, cloneCanvas);
  });

  var canvas = document.createElement('canvas');
  canvas.width = width * multiplier;
  canvas.height = height * multiplier;
  var ctx = canvas.getContext('2d');
  var data = "\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"" + width + "\" height=\"" + height + "\">\n      <foreignObject\n        width=\"" + width + "\"\n        height=\"" + height + "\"\n      >\n        " + serializeNodeList(styleNodes) + "\n        " + serializer.serializeToString(cloned) + "\n      </foreignObject>\n    </svg>";
  var url = "data:image/svg+xml;charset=utf-8, " + encodeURIComponent(data);
  var img = new Image();
  img.setAttribute('crossOrigin', 'anonymous');
  img.src = url;

  img.onload = function onImgLoad() {
    ctx.drawImage(img, 0, 0, width * multiplier, height * multiplier);
    var dataURL = canvas.toDataURL('image/png');
    clbck(dataURL);
  };
}
/**
 * Opens image in a new tab
 */

export function openImg(dataURL) {
  if (typeof global === 'object' && global.window) global.window.open(dataURL);
}
/**
 * Forces the browser to download the dataURL as a png image with the name
 * provided.
 */

export function downloadImg(dataURL, name) {
  if (name === void 0) {
    name = 'chart';
  }

  var link = document.createElement('a');
  link.download = name;
  link.href = dataURL;
  document.body.appendChild(link);
  link.click();
  link.remove();
}