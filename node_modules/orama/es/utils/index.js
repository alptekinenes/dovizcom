import _some from "lodash/some";
import _reduce from "lodash/reduce";
import _isUndefined from "lodash/isUndefined";
import _isNull from "lodash/isNull";
import _isNumber from "lodash/isNumber";
import _isNaN from "lodash/isNaN";
export { default as labeler } from './labeler';
export { default as stateHOC } from './stateHOC';
import * as _canvasUtils from './canvasUtils';
export { _canvasUtils as canvasUtils };
import * as _dataGeneration from './dataGeneration';
export { _dataGeneration as dataGeneration };
import * as _imageRender from './imageRender';
export { _imageRender as imageRender };
import * as _path2DUtils from './path2DUtils';
export { _path2DUtils as path2DUtils };
import * as _rectUtils from './rectUtils';
export { _rectUtils as rectUtils };
import * as _windowUtils from './windowUtils';
export { _windowUtils as windowUtils };

var checkNotPlotNumber = function checkNotPlotNumber(value) {
  return _isNaN(value) || !_isNumber(value);
};

export function notPlotNumber(value) {
  if (!Array.isArray(value)) return checkNotPlotNumber(value);
  return _some(value, checkNotPlotNumber);
}

var checkIsPlotNumber = function checkIsPlotNumber(value) {
  return !_isNaN(value) && _isNumber(value);
};

export function isPlotNumber(value) {
  if (!Array.isArray(value)) return checkIsPlotNumber(value);
  return _some(value, checkIsPlotNumber);
}
export var notDatum = function notDatum(value) {
  return _isUndefined(value) || _isNaN(value) || _isNull(value);
};
export var isDatum = function isDatum(value) {
  return !notDatum(value);
}; // returns (start, end] as opposed to [].slice() returning [start, end)

var slice = function slice(arr, start, end) {
  return arr.slice(start + 1, end + 1);
};

export function splitBy(arr, iteratee) {
  var _reduce2 = _reduce(arr, function (acc, val, idx) {
    if (iteratee(val, idx)) {
      return {
        sliceFrom: idx,
        returnArray: acc.returnArray.concat([slice(arr, acc.sliceFrom, idx)])
      };
    }

    return acc;
  }, {
    sliceFrom: 0,
    returnArray: []
  }),
      sliceFrom = _reduce2.sliceFrom,
      returnArray = _reduce2.returnArray;

  return returnArray.concat([slice(arr, sliceFrom, arr.length)]);
}