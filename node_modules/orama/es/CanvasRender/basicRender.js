import _flatMap from "lodash/flatMap";
import _each from "lodash/each";
import { notDatum } from '../utils';
import clearAndClip from './clearAndClip';

var extractRenderDataFromLayers = function extractRenderDataFromLayers(renderLayers) {
  return _flatMap(renderLayers, 'renderData');
};

function getRenderObjects(props) {
  var renderData = props.renderData,
      renderLayers = props.renderLayers;
  if (renderData) return renderData;
  if (renderLayers) return extractRenderDataFromLayers(renderLayers);
  return [];
}

function stroke(theme, ctx, d) {
  ctx.globalAlpha = d.strokeAlpha || d.alpha || theme.plotAlpha;
  ctx.lineWidth = d.lineWidth || theme.plotLineWidth;
  ctx.strokeStyle = d.stroke || theme.plotFill;

  if (d.lineDash) {
    ctx.setLineDash(d.lineDash);
  }

  ctx.stroke(d.path2D);
}

export default function basicRender(props, ctx) {
  var theme = props.theme;
  ctx.save();
  ctx.lineJoin = 'round';
  clearAndClip(props, ctx);

  _each(getRenderObjects(props), function (d) {
    if (!d) return;

    if (d.type === 'line') {
      stroke(theme, ctx, d);
    } else if (d.type === 'area') {
      ctx.globalAlpha = d.fillAlpha || d.alpha || theme.plotAlpha;
      ctx.fillStyle = d.fill || theme.plotFill;
      ctx.fill(d.path2D);
      if (d.stroke) stroke(theme, ctx, d);
    } else if (d.type === 'text') {
      if (notDatum(d.text)) return;
      ctx.save();
      ctx.globalAlpha = d.alpha;
      ctx.font = d.font || (d.fontSize || theme.plotFontSize) + "px " + theme.fontFamilyMono;
      ctx.fillStyle = d.fill || theme.textFill;
      ctx.textAlign = d.textAlign || 'left';
      ctx.textBaseline = d.textBaseline || 'alphabetic';
      ctx.translate(d.x, d.y);
      ctx.rotate(d.rotate);
      ctx.fillText(d.text, 0, 0);
      ctx.restore();
    }
  });

  ctx.restore();
}