import _assertThisInitialized from "@babel/runtime/helpers/builtin/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/builtin/inheritsLoose";
// Copyright 2018 Kensho Technologies, LLC.
import * as React from 'react';
import PropTypes from 'prop-types';
import DEFAULT_THEME from '../defaultTheme';
import { WIDTH, HEIGHT } from '../chartCore/defaults';
import basicRender from './basicRender';
/**
 * Component create a Canvas and use the renderData for drawing geometries on it.
 * The renderData follows a specific format.
 */

var CanvasRender =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CanvasRender, _React$Component);

  function CanvasRender() {
    var _temp, _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_temp = _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this, _this.handleCanvasRef = function (canvasNode) {
      _this.canvasNode = canvasNode;
    }, _temp) || _assertThisInitialized(_this);
  }

  var _proto = CanvasRender.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.handleUpdate(this.props);
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.renderData !== nextProps.renderData) {
      this.handleUpdate(nextProps);
    }

    if (this.props.renderLayers !== nextProps.renderLayers) {
      this.handleUpdate(nextProps);
    }
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (this.props.width !== nextProps.width || this.props.height !== nextProps.height) return true;
    return false;
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.handleUpdate(this.props);
  };

  _proto.handleUpdate = function handleUpdate(props) {
    var ctx = this.canvasNode.getContext('2d');
    ctx.save();
    ctx.scale(2, 2);
    this.props.render(props, ctx);
    ctx.restore();
  };

  _proto.render = function render() {
    return React.createElement("canvas", {
      height: this.props.height * 2,
      ref: this.handleCanvasRef,
      style: {
        display: 'block',
        position: 'absolute',
        width: this.props.width,
        height: this.props.height
      },
      width: this.props.width * 2
    });
  };

  return CanvasRender;
}(React.Component);

CanvasRender.defaultProps = {
  render: basicRender,
  width: WIDTH,
  height: HEIGHT,
  theme: DEFAULT_THEME
};
export { CanvasRender as default };
CanvasRender.propTypes = process.env.NODE_ENV !== "production" ? {
  clip: PropTypes.bool,
  height: PropTypes.number,
  plotRect: PropTypes.object,
  render: PropTypes.func,
  renderData: PropTypes.array,
  renderLayers: PropTypes.array,
  theme: PropTypes.object,
  width: PropTypes.number
} : {};