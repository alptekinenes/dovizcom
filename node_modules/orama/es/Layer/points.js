import _isArray from "lodash/isArray";
import _flatten from "lodash/flatten";
import _map from "lodash/map";
import { getMidX, getMidY } from '../utils/rectUtils';
import { getPath2D } from '../utils/path2DUtils';
import getPlotValues from './getPlotValues';
/*
`points` is used to generate render data for dots and similar.
it handles `x`, `y`, 'radius' and 'fill'.

@calling logic
points{
  getPointRenderData(retrievePointsData){}
}
*/

/*
generates the array of render data
*/

function getPointRenderData(props, datum, idx) {
  var values = getPlotValues(props, datum, idx, {
    hoverAlpha: 0.75,
    radius: 4,
    x: getMidX(props.plotRect),
    y: getMidY(props.plotRect)
  });
  var path2D = getPath2D();
  var hover2ndPath2D = getPath2D();
  path2D.arc(values.x, values.y, values.radius, 0, 2 * Math.PI);
  hover2ndPath2D.arc(values.x, values.y, values.radius + 8, 0, 2 * Math.PI);
  return Object.assign({}, values, {
    hover2ndPath2D: hover2ndPath2D,
    path2D: path2D,
    type: 'area'
  });
} // main entry point, if there's only `xMap` or `yMap` it will output a one dimension plot


export default function points(props) {
  if (!props.xScale && !props.yScale) return undefined;
  return _flatten(_map(props.data, function (datum, idx) {
    if (_isArray(datum)) {
      return _map(datum, function (d, i) {
        return getPointRenderData(props, d, i);
      });
    }

    return getPointRenderData(props, datum, idx);
  }));
}