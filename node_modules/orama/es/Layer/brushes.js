import _isNumber from "lodash/isNumber";
import _flatten from "lodash/flatten";
import _map from "lodash/map";
import { BACKGROUND_OFFSET } from '../chartCore/defaults';
import { getPath2D } from '../utils/path2DUtils';
import { bottomHorizontalLine, bottomCenterLine, centerArea, verticalArea, horizontalArea, leftVerticalLine, leftCenterLine, rightVerticalLine, rightCenterLine, topHorizontalLine, topCenterLine, rightBottomLine, leftBottomLine, leftTopLine, rightTopLine } from './getBrushesRenderData';
import getPlotValues from './getPlotValues';

function brushesRender(props, datum) {
  var _props$backgroundOffs = props.backgroundOffset,
      backgroundOffset = _props$backgroundOffs === void 0 ? BACKGROUND_OFFSET : _props$backgroundOffs,
      plotRect = props.plotRect;
  var stroke = props.strokeValue;
  var fill = props.fillValue;
  var fillAlpha = props.fillAlphaValue || 0.4;
  var lineWidth = props.lineWidthValue || 3;
  var values = getPlotValues(props, datum);
  var renderArgs = Object.assign({}, values, {
    plotRect: plotRect,
    backgroundOffset: backgroundOffset,
    stroke: stroke,
    fill: fill,
    fillAlpha: fillAlpha,
    lineWidth: lineWidth
  });

  if (_isNumber(values.x1) && _isNumber(values.x2) && _isNumber(values.y1) && _isNumber(values.y2)) {
    return [centerArea(renderArgs), leftCenterLine(renderArgs), rightCenterLine(renderArgs), topCenterLine(renderArgs), bottomCenterLine(renderArgs), leftTopLine(renderArgs), leftBottomLine(renderArgs), rightTopLine(renderArgs), rightBottomLine(renderArgs)];
  } else if (_isNumber(values.x1) && _isNumber(values.x2)) {
    return [verticalArea(renderArgs), leftVerticalLine(renderArgs), rightVerticalLine(renderArgs)];
  } else if (_isNumber(values.y1) && _isNumber(values.y2)) {
    return [horizontalArea(renderArgs), topHorizontalLine(renderArgs), bottomHorizontalLine(renderArgs)];
  }

  return {
    showHover: false,
    type: 'area',
    path2D: getPath2D()
  };
}

export default function brushes(props) {
  if (!props.xScale && !props.yScale) return undefined;
  return _flatten(_map(_flatten(props.data), function (datum) {
    return brushesRender(props, datum);
  }));
}