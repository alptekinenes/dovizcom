import _uniq from "lodash/uniq";
import _toPairs from "lodash/toPairs";
import _reduce from "lodash/reduce";
import _min from "lodash/min";
import _maxBy from "lodash/maxBy";
import _max from "lodash/max";
import _map from "lodash/map";
import _isNumber from "lodash/isNumber";
import { getMaxX, getMaxY } from '../utils/rectUtils';
import { getScale } from './getScale';
import { DOMAIN, JS_TO_VIS_TYPE, TICK_COUNT, TICK_X_SPACE, TICK_Y_SPACE, TYPE } from './defaults';
/*
get methods that are used on the addMethods module
addMethods add new properties to the props object, these new properties are generated using these getMethods.
*/

export { getScale };
export function toType(input) {
  return {}.toString.call(input).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
}
export function getType(props, key) {
  if (props[key + "Type"]) return props[key + "Type"];
  var array = props[key + "Array"];
  if (!array) return undefined;

  var counter = _reduce(array, function (acc, d) {
    /* eslint-disable no-param-reassign */
    acc[toType(d)] += 1;
    /* eslint-enable no-param-reassign */

    return acc;
  }, {
    number: 0,
    string: 0,
    date: 0
  });

  var counterPairs = _toPairs(counter);

  var maxName = _maxBy(counterPairs, '1')[0];

  return JS_TO_VIS_TYPE[maxName];
}
export function getDomain(props, key) {
  if (props[key + "Domain"]) return props[key + "Domain"];
  var array = props[key + "Array"],
      _props$ = props[key + "Type"],
      type = _props$ === void 0 ? TYPE : _props$,
      zeroBased = props[key + "ZeroBased"];

  switch (type) {
    case 'ordinal':
      return _uniq(array);

    default:
      if (zeroBased) {
        return [_min([_min(array), 0]), _max([_max(array), 0])];
      }

      return [_min(array), _max(array)];
  }
}
export function getRange(props, key) {
  if (props[key + "Range"]) return props[key + "Range"];
  var plotRect = props.plotRect,
      _props$2 = props[key + "Type"],
      type = _props$2 === void 0 ? TYPE : _props$2;

  switch (key) {
    case 'y':
      return [getMaxY(plotRect), plotRect.y];

    case 'radius':
      switch (type) {
        case 'ordinal':
          return [2, 4, 8, 12, 16, 20];

        default:
          return [2, 20];
      }

    case 'lineWidth':
      switch (type) {
        case 'ordinal':
          return [1, 2, 3, 4];

        default:
          return [0.5, 4];
      }

    case 'lineDash':
      return [[2], [4], [8], [7, 4, 2, 4]];

    case 'fill':
    case 'stroke':
    case 'hoverStroke':
      switch (type) {
        case 'ordinal':
          return props.theme.plotOrdinalRangeFill;

        default:
          return props.theme.plotLinearRangeFill;
      }

    case 'x':
    default:
      return [plotRect.x, getMaxX(plotRect)];
  }
}
export function getTickCount(props, key) {
  if (_isNumber(props[key + "TickCount"])) return props[key + "TickCount"];
  var range = props[key + "Range"],
      _tickSpace = props[key + "TickSpace"];

  if (key === 'y') {
    var xTickSpace = _tickSpace || TICK_Y_SPACE;
    return Math.ceil((range[0] - range[1]) / xTickSpace);
  }

  if (key === 'x') {
    var yTickSpace = _tickSpace || TICK_X_SPACE;
    return Math.ceil((range[1] - range[0]) / yTickSpace);
  }

  return 0;
}
export function getTickFormat(props, key) {
  if (props[key + "TickFormat"]) return props[key + "TickFormat"];
  var type = props[key + "Type"],
      _props$3 = props[key + "Scale"],
      scale = _props$3 === void 0 ? getScale(props, key) : _props$3,
      _props$4 = props[key + "TickCount"],
      tickCount = _props$4 === void 0 ? TICK_COUNT : _props$4;
  if (type === 'time') return scale.tickFormat();
  return scale.tickFormat(tickCount);
}
export function getTooltipFormat(props, key) {
  if (props[key + "TooltipFormat"]) return props[key + "TooltipFormat"];
  var _props$5 = props[key + "Type"],
      type = _props$5 === void 0 ? TYPE : _props$5,
      _props$6 = props[key + "Scale"],
      scale = _props$6 === void 0 ? getScale(props, key) : _props$6,
      _props$7 = props[key + "TickCount"],
      tickCount = _props$7 === void 0 ? TICK_COUNT : _props$7;

  if (type === 'log') {
    var _Object$assign;

    var linearScale = getScale(Object.assign({}, props, (_Object$assign = {}, _Object$assign[key + "Type"] = 'linear', _Object$assign)), key);
    return linearScale.tickFormat(tickCount);
  }

  if (type === 'time') {
    return function (d) {
      return d.toDateString();
    };
  }

  if (!scale.tickFormat) return function (d) {
    return d;
  };
  return scale.tickFormat(tickCount);
}
export function getTicks(props, key) {
  if (props[key + "Ticks"]) return props[key + "Ticks"];
  var _props$8 = props[key + "Type"],
      type = _props$8 === void 0 ? TYPE : _props$8,
      _props$9 = props[key + "Domain"],
      domain = _props$9 === void 0 ? DOMAIN : _props$9,
      _props$10 = props[key + "TickCount"],
      tickCount = _props$10 === void 0 ? TICK_COUNT : _props$10,
      _props$11 = props[key + "Scale"],
      scale = _props$11 === void 0 ? getScale(props, key) : _props$11;
  if (type === 'ordinal') return _map(domain, function (d) {
    return {
      value: d,
      text: d
    };
  });
  var tickFormat = getTickFormat(Object.assign({}, props, {
    scale: scale
  }), key);
  var ticks = scale.ticks(tickCount);
  return _map(ticks, function (d) {
    return {
      value: d,
      text: tickFormat(d)
    };
  });
}