import _objectWithoutProperties from "@babel/runtime/helpers/builtin/objectWithoutProperties";
import _indexOf from "lodash/indexOf";
// Copyright 2018 Kensho Technologies, LLC.
import PropTypes from 'prop-types';
import * as React from 'react';
import State from '../utils/State';

function mouseDown(props, childProps) {
  var data = props.data;
  var renderDatum = childProps.renderDatum;

  if (renderDatum) {
    var index = _indexOf(data, renderDatum.data);

    if (index > -1) {
      data.splice(index, 1);
      props.onUpdate({
        data: data.concat()
      });
    } else {
      props.onUpdate({
        data: data.concat([renderDatum.data])
      });
    }
  }
}

function handleChart(props, childProps) {
  switch (childProps.action) {
    case 'mouseDown':
      mouseDown(props, childProps);
      break;
    // case 'mouseDrag': mouseDrag(props, childProps)
    //   break

    default:
  }
}

function InnerHighlight(props) {
  var child = React.Children.only(props.children);

  if (child.type.displayName === 'ChartWidthHOC') {
    var HighlightElement = React.createElement(props.Component, Object.assign({
      skipExtractArrays: true,
      key: "InnerHighlight",
      fillValue: "black",
      alphaValue: 0.5,
      data: props.data
    }, props.componentProps));
    var layers = React.Children.toArray(child.props.children);
    layers.splice(props.slice, 0, HighlightElement);

    var onUpdate = function onUpdate(childProps) {
      return handleChart(props, childProps);
    };

    return React.createElement("div", null, React.cloneElement(child, {
      onUpdate: onUpdate
    }, layers));
  }

  return React.createElement("div", null);
}

InnerHighlight.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.node,
  componentProps: PropTypes.object,
  data: PropTypes.array,
  slice: PropTypes.number
} : {};
InnerHighlight.defaultProps = {
  slice: 1,
  data: []
};
export default function Highlight(props) {
  var children = props.children,
      rest = _objectWithoutProperties(props, ["children"]);

  return React.createElement(State, rest, React.createElement(InnerHighlight, {
    onUpdate: props.onUpdate
  }, children));
}
Highlight.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.node,
  onUpdate: PropTypes.func
} : {};