// Copyright 2018 Kensho Technologies, LLC.
import * as React from 'react';
import PropTypes from 'prop-types';
import stateHOC from './utils/stateHOC';
import { getWindow } from './utils/windowUtils';
import BlockSize from './utilComponents/BlockSize';
import Portal from './utilComponents/Portal';
import DefaultTooltip from './Tooltip';
var TOOLTIP_MARGIN = 15;

function handleBlockSizeUpdate(props, childProps) {
  props.onState({
    width: childProps.width,
    height: childProps.height
  });
}

export function getTooltipPosition(props) {
  var mouse = props.mouse,
      width = props.width,
      height = props.height;

  if (!width || !height) {
    return {};
  }

  var _window = getWindow();

  var pos = {};

  if (mouse.x + width + TOOLTIP_MARGIN * 2 + 1 > _window.innerWidth) {
    if (width + TOOLTIP_MARGIN * 2 > mouse.x) {
      pos.left = 0;
    } else {
      pos.right = _window.innerWidth - mouse.x;
    }
  } else {
    pos.left = mouse.x;
  }

  if (mouse.y + height + TOOLTIP_MARGIN * 2 + 1 > _window.innerHeight) {
    if (height + TOOLTIP_MARGIN * 2 > mouse.y) {
      pos.top = 0;
    } else {
      pos.bottom = _window.innerHeight - mouse.y;
    }
  } else {
    pos.top = mouse.y;
  }

  return pos;
}

function TooltipWrapper(props) {
  if (!props.mouse || !props.hoverData) return null;
  var _props$layerProps$Too = props.layerProps.Tooltip,
      Tooltip = _props$layerProps$Too === void 0 ? DefaultTooltip : _props$layerProps$Too;
  return React.createElement(Portal, null, React.createElement(BlockSize, {
    onUpdate: function onUpdate(childProps) {
      return handleBlockSizeUpdate(props, childProps);
    },
    style: Object.assign({
      margin: TOOLTIP_MARGIN,
      pointerEvents: 'none',
      position: 'fixed',
      zIndex: '999999'
    }, getTooltipPosition(props))
  }, React.createElement(Tooltip, {
    hoverData: props.hoverData,
    layerProps: props.layerProps,
    theme: props.theme
  })));
}

TooltipWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  hoverData: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
  layerProps: PropTypes.object,
  mouse: PropTypes.object,
  theme: PropTypes.object
} : {};
export default stateHOC(TooltipWrapper);