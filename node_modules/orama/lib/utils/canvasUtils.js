"use strict";

exports.__esModule = true;
exports.getCachedContext = getCachedContext;
exports.clearRect = clearRect;
exports.fillRect = fillRect;
exports.strokeRect = strokeRect;
exports.canvasMock = exports.ctxMock = void 0;

var _rectUtils = require("./rectUtils");

// Copyright 2018 Kensho Technologies, LLC.
var noop = function noop() {
  return undefined;
};

var ctxMock = {
  beginPath: noop,
  bezierCurveTo: noop,
  clearRect: noop,
  clip: noop,
  closePath: noop,
  fill: noop,
  fillRect: noop,
  fillText: noop,
  isPointInPath: noop,
  isPointInStroke: noop,
  lineTo: noop,
  measureText: function measureText(text) {
    return {
      width: text.toString().length
    };
  },
  arcTo: noop,
  moveTo: noop,
  quadraticCurveTo: noop,
  rect: noop,
  restore: noop,
  rotate: noop,
  save: noop,
  scale: noop,
  strokeRect: noop,
  strokeText: noop,
  transform: noop,
  translate: noop,
  stroke: noop,
  setLineDash: noop
};
exports.ctxMock = ctxMock;
var canvasMock = {
  getContext: function getContext() {
    return ctxMock;
  },
  getBoundingClientRect: function getBoundingClientRect() {
    return {
      left: 0,
      top: 0,
      width: 500,
      height: 500
    };
  }
};
exports.canvasMock = canvasMock;
var cachedCtx;
/*
Returns a cached offscreen canvas render.
In case the DOM is not available, returns a mocked render context.

The context returned by this function is shared, always call `save()` and `restore()` when manipulating it
*/

function getCachedContext() {
  if (cachedCtx) return cachedCtx;

  if (global.document && global.document.createElement) {
    cachedCtx = document.createElement('canvas').getContext('2d');
    return cachedCtx;
  }

  return ctxMock;
}

function clearRect(ctx, rectInput) {
  var rect = Object.assign({}, _rectUtils.rectBase, rectInput);
  ctx.clearRect(rect.x, rect.y, rect.width, rect.height);
}

function fillRect(ctx, rectInput) {
  var rect = Object.assign({}, _rectUtils.rectBase, rectInput);
  ctx.fillRect(rect.x, rect.y, rect.width, rect.height);
}

function strokeRect(ctx, rectInput) {
  var rect = Object.assign({}, _rectUtils.rectBase, rectInput);
  ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);
}