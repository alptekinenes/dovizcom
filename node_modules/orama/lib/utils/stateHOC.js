"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/builtin/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

exports.__esModule = true;
exports.getName = getName;
exports.getInitialState = getInitialState;
exports.default = stateHOC;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/inheritsLoose"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _isStatelessComponentFunction = _interopRequireDefault(require("./isStatelessComponentFunction"));

// Copyright 2018 Kensho Technologies, LLC.
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

function getName(name) {
  if (!name) return 'unknown';
  if (name[0] === '_') return name.substring(1);
  return name;
}

function getInitialState(initialState) {
  if (isFunction(initialState)) return initialState();
  return initialState;
}
/**
 * Funtion for wrapping 'stateless functional components' during development, allowing then to respond to onUpdate without changes to parent components.
 *
 * @example
 * import React, {PropTypes} from 'react'
 * import {Block} from '@luiscarli/display'
 * import Annotation from '../Annotation'
 *
 * export function handleAnnotationUpdate(props, annotationProps) {
 *   props.onUpdate({
 *     ...props,
 *     text: annotationProps.text,
 *   })
 * }
 *
 * const ExampleComponent = props => (
 *   <Block>
 *     <Annotation
 *       text={props.text}
 *       onUpdate={handleAnnotationUpdate.bind(null, props)}
 *     />
 *   </Block>
 * )
 *
 * ExampleComponent.propTypes = {
 *   onUpdate: PropTypes.func,
 *   text: PropTypes.string.isRequired,
 * }
 *
 * export default ExampleComponent
 */


function stateHOC(Child, initialState) {
  var _class2, _temp4;

  if (initialState === void 0) {
    initialState = {};
  }

  if ((0, _isStatelessComponentFunction.default)(Child)) {
    var _class, _temp2;

    return _temp2 = _class =
    /*#__PURE__*/
    function (_React$PureComponent) {
      (0, _inheritsLoose2.default)(StateHOC, _React$PureComponent);

      function StateHOC() {
        var _temp, _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return (_temp = _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this, _this.state = Object.assign({}, getInitialState(Child.initialState), getInitialState(initialState)), _this.handleChildUpdate = function (childProps) {
          _this.setState(childProps);
        }, _temp) || (0, _assertThisInitialized2.default)(_this);
      }

      var _proto = StateHOC.prototype;

      _proto.render = function render() {
        return Child(Object.assign({}, this.props, this.state, {
          onUpdate: this.props.onUpdate || this.handleChildUpdate,
          onState: this.handleChildUpdate
        }));
      };

      return StateHOC;
    }(React.PureComponent), _class.displayName = getName(Child.name) + "(state)", _class.propTypes = {
      onUpdate: _propTypes.default.func
    }, _class.defaultProps = Child.defaultProps, _temp2;
  } // eslint-disable-next-line react/no-multi-comp


  return _temp4 = _class2 =
  /*#__PURE__*/
  function (_React$PureComponent2) {
    (0, _inheritsLoose2.default)(StateHOC, _React$PureComponent2);

    function StateHOC() {
      var _temp3, _this2;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_temp3 = _this2 = _React$PureComponent2.call.apply(_React$PureComponent2, [this].concat(args)) || this, _this2.state = Object.assign({}, getInitialState(Child.initialState), getInitialState(initialState)), _this2.handleChildUpdate = function (childProps) {
        _this2.setState(childProps);
      }, _temp3) || (0, _assertThisInitialized2.default)(_this2);
    }

    var _proto2 = StateHOC.prototype;

    _proto2.render = function render() {
      return React.createElement(Child, Object.assign({}, this.props, this.state, {
        onUpdate: this.props.onUpdate || this.handleChildUpdate
      }));
    };

    return StateHOC;
  }(React.PureComponent), _class2.displayName = Child.displayName + "(state)", _class2.propTypes = {
    onUpdate: _propTypes.default.func
  }, _class2.defaultProps = {}, _temp4;
}