"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/builtin/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/inheritsLoose"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hoverRender = _interopRequireDefault(require("../CanvasRender/hoverRender"));

var _TooltipWrapper = _interopRequireDefault(require("../TooltipWrapper"));

var _CanvasRender = _interopRequireDefault(require("../CanvasRender"));

var _getDataUnderMouse = require("./getDataUnderMouse");

var _methods = require("./methods");

// Copyright 2018 Kensho Technologies, LLC.

/*
Usually used inside of <ChartRender />
Get hovered and clicked data on renderData using a <canvas /> element
*/
var CanvasInput =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(CanvasInput, _React$Component);

  function CanvasInput() {
    var _temp, _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_temp = _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this, _this.state = {}, _this.handleCanvasRef = function (canvasNode) {
      _this.canvasNode = canvasNode;
    }, _this.handleClick = function (evt) {
      evt.stopPropagation();
      evt.preventDefault();

      if (!_this.state.mouseDrag) {
        var mouse = (0, _methods.getMouseFromEvt)(evt);
        var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode));

        _this.props.onUpdate({
          action: 'mouseClick',
          mouse: mouse,
          renderDatum: solvedData.renderDatum,
          hoverRenderData: solvedData.hoverRenderData,
          hoverData: solvedData.hoverData,
          localMouse: solvedData.localMouse,
          layerProps: solvedData.layerProps,
          rootProps: _this.props.rootProps
        });
      }

      _this.setState({
        mouseDrag: false
      });
    }, _this.handleDoubleClick = function () {
      _this.props.onUpdate({
        action: 'mouseDoubleClick'
      });
    }, _this.handleMouseDown = function (evt) {
      var mouse = (0, _methods.getMouseFromEvt)(evt);
      var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode));

      _this.props.onUpdate({
        action: 'mouseDown',
        mouse: mouse,
        renderDatum: solvedData.renderDatum,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        localMouse: solvedData.localMouse,
        layerProps: solvedData.layerProps,
        rootProps: _this.props.rootProps
      });

      _this.setState({
        mouseDown: true,
        mouse: mouse,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        layerProps: solvedData.layerProps
      });

      _this.lastMouse = mouse;
    }, _this.handleMouseMove = function (evt) {
      var mouse = (0, _methods.getMouseFromEvt)(evt);
      var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode));
      var mouseDelta;

      if (_this.lastMouse) {
        mouseDelta = {
          x: _this.lastMouse.x - mouse.x,
          y: _this.lastMouse.y - mouse.y
        };
      }

      _this.props.onUpdate({
        action: _this.state.mouseDrag ? 'mouseDrag' : 'mouseMove',
        mouse: mouse,
        mouseDelta: mouseDelta,
        renderDatum: solvedData.renderDatum,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        localMouse: solvedData.localMouse,
        layerProps: solvedData.layerProps,
        rootProps: _this.props.rootProps
      });

      _this.setState(function (prevState) {
        return {
          mouseDrag: !!prevState.mouseDown,
          mouse: mouse,
          hoverRenderData: solvedData.hoverRenderData,
          hoverData: solvedData.hoverData,
          layerProps: solvedData.layerProps
        };
      });

      _this.lastMouse = mouse;
      _this.mouseLeave = false;
    }, _this.handleMouseUp = function (evt) {
      evt.stopPropagation();
      evt.preventDefault();
      var mouse = (0, _methods.getMouseFromEvt)(evt);
      var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(_this.props, mouse, _this.canvasNode, evt));

      _this.props.onUpdate({
        action: 'mouseUp',
        mouse: mouse,
        renderDatum: solvedData.renderDatum,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        localMouse: solvedData.localMouse,
        layerProps: solvedData.layerProps,
        rootProps: _this.props.rootProps
      });

      _this.setState({
        mouseDrag: false,
        mouseDown: false
      });
    }, _this.handleMouseLeave = function () {
      _this.props.onUpdate({
        action: 'mouseLeave'
      });

      _this.setState({
        mouse: undefined,
        hoverRenderData: undefined,
        hoverData: undefined,
        layerProps: undefined
      });

      _this.mouseLeave = true;
    }, _temp) || (0, _assertThisInitialized2.default)(_this);
  }

  var _proto = CanvasInput.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.state.mouse && !this.mouseLeave) {
      var solvedData = (0, _methods.runHoverSolverOn)((0, _getDataUnderMouse.getDataUnderMouse)(nextProps, this.state.mouse, this.canvasNode));
      this.setState({
        renderDatum: solvedData.renderDatum,
        hoverRenderData: solvedData.hoverRenderData,
        hoverData: solvedData.hoverData,
        localMouse: solvedData.localMouse,
        layerProps: solvedData.layerProps
      });
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.state.mouseDrag && !prevState.mouseDrag) {
      document.addEventListener('mouseup', this.handleMouseUp);
    } else if (!this.state.mouseDrag && prevState.mouseDrag) {
      document.removeEventListener('mouseup', this.handleMouseUp);
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        rootProps = _this$props.rootProps,
        theme = _this$props.theme;
    var _this$state = this.state,
        hoverRenderData = _this$state.hoverRenderData,
        hoverData = _this$state.hoverData,
        layerProps = _this$state.layerProps,
        mouse = _this$state.mouse;
    return React.createElement("div", null, React.createElement(_CanvasRender.default // hoverRender
    , {
      clip: true,
      height: rootProps.height,
      plotRect: rootProps.plotRect,
      render: _hoverRender.default,
      renderData: hoverRenderData,
      theme: theme,
      width: rootProps.width
    }), React.createElement("canvas", {
      height: rootProps.height,
      onClick: this.handleClick,
      onDoubleClick: this.handleDoubleClick,
      onMouseDown: this.handleMouseDown,
      onMouseLeave: this.handleMouseLeave,
      onMouseMove: this.handleMouseMove,
      onMouseUp: this.handleMouseUp,
      onTouchEnd: this.handleMouseLeave,
      onTouchMove: this.handleMouseMove,
      onTouchStart: this.handleMouseDown,
      ref: this.handleCanvasRef,
      style: {
        cursor: 'pointer',
        display: 'block',
        position: 'absolute',
        userSelect: 'none',
        width: rootProps.width,
        height: rootProps.height
      },
      width: rootProps.width
    }), mouse && hoverData ? React.createElement(_TooltipWrapper.default, {
      hoverData: hoverData,
      layerProps: layerProps,
      mouse: mouse,
      theme: theme
    }) : null);
  };

  return CanvasInput;
}(React.Component);

exports.default = CanvasInput;
CanvasInput.defaultProps = {
  renderLayers: []
};
CanvasInput.propTypes = process.env.NODE_ENV !== "production" ? {
  onUpdate: _propTypes.default.func.isRequired,
  renderLayers: _propTypes.default.array,
  rootProps: _propTypes.default.object,
  theme: _propTypes.default.object
} : {};