"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

exports.__esModule = true;
exports.default = text;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _rectUtils = require("../utils/rectUtils");

var _fitCheckText = _interopRequireDefault(require("../utils/fitCheckText"));

var _getPlotValues = _interopRequireDefault(require("./getPlotValues"));

// generate the array of render data
function getTextRenderData(props, datum, idx) {
  var plotRect = props.plotRect,
      theme = props.theme,
      width = props.width,
      height = props.height;
  var values = (0, _getPlotValues.default)(props, datum, idx, {
    x: (0, _rectUtils.getMidX)(props.plotRect),
    y: (0, _rectUtils.getMidY)(props.plotRect)
  });
  if (values.textSnap === 'top') values.y = (0, _rectUtils.getMinY)(plotRect);
  if (values.textSnap === 'bottom') values.y = (0, _rectUtils.getMaxY)(plotRect);
  if (values.textSnap === 'left') values.x = (0, _rectUtils.getMinX)(plotRect);
  if (values.textSnap === 'right') values.x = (0, _rectUtils.getMaxX)(plotRect);

  if (values.textSnap === 'topLeft') {
    values.x = (0, _rectUtils.getMinX)(plotRect);
    values.y = (0, _rectUtils.getMinY)(plotRect);
  }

  if (values.textSnap === 'topRight') {
    values.x = (0, _rectUtils.getMaxX)(plotRect);
    values.y = (0, _rectUtils.getMinY)(plotRect);
  }

  if (values.textSnap === 'bottomLeft') {
    values.x = (0, _rectUtils.getMinX)(plotRect);
    values.y = (0, _rectUtils.getMaxY)(plotRect);
  }

  if (values.textSnap === 'bottomRight') {
    values.x = (0, _rectUtils.getMaxX)(plotRect);
    values.y = (0, _rectUtils.getMaxY)(plotRect);
  }

  var newValues = (0, _fitCheckText.default)(values, width, height, theme);
  return Object.assign({}, newValues, {
    type: 'text'
  });
} // if there's only `xMap` or `yMap`, output a one-dimensional plot


function text(props) {
  if (!props.xScale && !props.yScale) return undefined;
  return (0, _map2.default)((0, _flatten2.default)(props.data), function (datum, idx) {
    return getTextRenderData(props, datum, idx);
  });
}