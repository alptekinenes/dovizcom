"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

exports.__esModule = true;
exports.toType = toType;
exports.getType = getType;
exports.getDomain = getDomain;
exports.getRange = getRange;
exports.getTickCount = getTickCount;
exports.getTickFormat = getTickFormat;
exports.getTooltipFormat = getTooltipFormat;
exports.getTicks = getTicks;

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _toPairs2 = _interopRequireDefault(require("lodash/toPairs"));

var _reduce2 = _interopRequireDefault(require("lodash/reduce"));

var _min2 = _interopRequireDefault(require("lodash/min"));

var _maxBy2 = _interopRequireDefault(require("lodash/maxBy"));

var _max2 = _interopRequireDefault(require("lodash/max"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _rectUtils = require("../utils/rectUtils");

var _getScale = require("./getScale");

exports.getScale = _getScale.getScale;

var _defaults = require("./defaults");

/*
get methods that are used on the addMethods module
addMethods add new properties to the props object, these new properties are generated using these getMethods.
*/
function toType(input) {
  return {}.toString.call(input).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
}

function getType(props, key) {
  if (props[key + "Type"]) return props[key + "Type"];
  var array = props[key + "Array"];
  if (!array) return undefined;
  var counter = (0, _reduce2.default)(array, function (acc, d) {
    /* eslint-disable no-param-reassign */
    acc[toType(d)] += 1;
    /* eslint-enable no-param-reassign */

    return acc;
  }, {
    number: 0,
    string: 0,
    date: 0
  });
  var counterPairs = (0, _toPairs2.default)(counter);
  var maxName = (0, _maxBy2.default)(counterPairs, '1')[0];
  return _defaults.JS_TO_VIS_TYPE[maxName];
}

function getDomain(props, key) {
  if (props[key + "Domain"]) return props[key + "Domain"];
  var array = props[key + "Array"],
      _props$ = props[key + "Type"],
      type = _props$ === void 0 ? _defaults.TYPE : _props$,
      zeroBased = props[key + "ZeroBased"];

  switch (type) {
    case 'ordinal':
      return (0, _uniq2.default)(array);

    default:
      if (zeroBased) {
        return [(0, _min2.default)([(0, _min2.default)(array), 0]), (0, _max2.default)([(0, _max2.default)(array), 0])];
      }

      return [(0, _min2.default)(array), (0, _max2.default)(array)];
  }
}

function getRange(props, key) {
  if (props[key + "Range"]) return props[key + "Range"];
  var plotRect = props.plotRect,
      _props$2 = props[key + "Type"],
      type = _props$2 === void 0 ? _defaults.TYPE : _props$2;

  switch (key) {
    case 'y':
      return [(0, _rectUtils.getMaxY)(plotRect), plotRect.y];

    case 'radius':
      switch (type) {
        case 'ordinal':
          return [2, 4, 8, 12, 16, 20];

        default:
          return [2, 20];
      }

    case 'lineWidth':
      switch (type) {
        case 'ordinal':
          return [1, 2, 3, 4];

        default:
          return [0.5, 4];
      }

    case 'lineDash':
      return [[2], [4], [8], [7, 4, 2, 4]];

    case 'fill':
    case 'stroke':
    case 'hoverStroke':
      switch (type) {
        case 'ordinal':
          return props.theme.plotOrdinalRangeFill;

        default:
          return props.theme.plotLinearRangeFill;
      }

    case 'x':
    default:
      return [plotRect.x, (0, _rectUtils.getMaxX)(plotRect)];
  }
}

function getTickCount(props, key) {
  if ((0, _isNumber2.default)(props[key + "TickCount"])) return props[key + "TickCount"];
  var range = props[key + "Range"],
      _tickSpace = props[key + "TickSpace"];

  if (key === 'y') {
    var xTickSpace = _tickSpace || _defaults.TICK_Y_SPACE;
    return Math.ceil((range[0] - range[1]) / xTickSpace);
  }

  if (key === 'x') {
    var yTickSpace = _tickSpace || _defaults.TICK_X_SPACE;
    return Math.ceil((range[1] - range[0]) / yTickSpace);
  }

  return 0;
}

function getTickFormat(props, key) {
  if (props[key + "TickFormat"]) return props[key + "TickFormat"];
  var type = props[key + "Type"],
      _props$3 = props[key + "Scale"],
      scale = _props$3 === void 0 ? (0, _getScale.getScale)(props, key) : _props$3,
      _props$4 = props[key + "TickCount"],
      tickCount = _props$4 === void 0 ? _defaults.TICK_COUNT : _props$4;
  if (type === 'time') return scale.tickFormat();
  return scale.tickFormat(tickCount);
}

function getTooltipFormat(props, key) {
  if (props[key + "TooltipFormat"]) return props[key + "TooltipFormat"];
  var _props$5 = props[key + "Type"],
      type = _props$5 === void 0 ? _defaults.TYPE : _props$5,
      _props$6 = props[key + "Scale"],
      scale = _props$6 === void 0 ? (0, _getScale.getScale)(props, key) : _props$6,
      _props$7 = props[key + "TickCount"],
      tickCount = _props$7 === void 0 ? _defaults.TICK_COUNT : _props$7;

  if (type === 'log') {
    var _Object$assign;

    var linearScale = (0, _getScale.getScale)(Object.assign({}, props, (_Object$assign = {}, _Object$assign[key + "Type"] = 'linear', _Object$assign)), key);
    return linearScale.tickFormat(tickCount);
  }

  if (type === 'time') {
    return function (d) {
      return d.toDateString();
    };
  }

  if (!scale.tickFormat) return function (d) {
    return d;
  };
  return scale.tickFormat(tickCount);
}

function getTicks(props, key) {
  if (props[key + "Ticks"]) return props[key + "Ticks"];
  var _props$8 = props[key + "Type"],
      type = _props$8 === void 0 ? _defaults.TYPE : _props$8,
      _props$9 = props[key + "Domain"],
      domain = _props$9 === void 0 ? _defaults.DOMAIN : _props$9,
      _props$10 = props[key + "TickCount"],
      tickCount = _props$10 === void 0 ? _defaults.TICK_COUNT : _props$10,
      _props$11 = props[key + "Scale"],
      scale = _props$11 === void 0 ? (0, _getScale.getScale)(props, key) : _props$11;
  if (type === 'ordinal') return (0, _map2.default)(domain, function (d) {
    return {
      value: d,
      text: d
    };
  });
  var tickFormat = getTickFormat(Object.assign({}, props, {
    scale: scale
  }), key);
  var ticks = scale.ticks(tickCount);
  return (0, _map2.default)(ticks, function (d) {
    return {
      value: d,
      text: tickFormat(d)
    };
  });
}