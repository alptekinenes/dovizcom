"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/builtin/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

exports.__esModule = true;
exports.default = Tooltip;

var _map2 = _interopRequireDefault(require("lodash/map"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _defaultTheme = _interopRequireDefault(require("./defaultTheme"));

var _extractTooltipData = _interopRequireDefault(require("./Chart/extractTooltipData"));

// Copyright 2018 Kensho Technologies, LLC.
var MAX_WIDTH = 320;

var getPadding = function getPadding(props) {
  return props.theme.tooltipFontSize / 2;
};

var row = function row(props, d, i) {
  return React.createElement("tr", {
    style: {
      background: i % 2 ? props.theme.tooltipBackgroundFill : props.theme.tooltipEvenBackgroundFill
    },
    key: i
  }, props.showKeys ? React.createElement("td", {
    style: {
      borderRight: "2px solid " + props.theme.tooltipKeyBorderStroke,
      padding: getPadding(props)
    }
  }, d.key) : null, React.createElement("td", {
    // Name
    style: {
      padding: getPadding(props),
      textAlign: 'left',
      verticalAlign: 'top'
    }
  }, d.name), React.createElement("td", {
    // Value
    style: {
      fontFamily: props.theme.fontFamilyMono,
      fontSize: props.theme.tooltipValueFontSize,
      padding: getPadding(props),
      textAlign: 'right',
      verticalAlign: 'top'
    }
  }, d.value));
};

row.propTypes = process.env.NODE_ENV !== "production" ? {
  showKeys: _propTypes.default.bool,
  theme: _propTypes.default.object
} : {};

var TooltipInner = function TooltipInner(props) {
  return React.createElement("div", {
    style: {
      background: props.theme.tooltipBackgroundFill,
      boxShadow: "1px 1px 1px " + props.theme.tooltipBoxShadowFill,
      color: props.theme.tooltipTextFill,
      fontFamily: props.theme.fontFamily,
      fontSize: props.theme.tooltipFontSize,
      maxWidth: MAX_WIDTH,
      opacity: 0.96
    }
  }, props.title ? React.createElement("div", {
    style: {
      fontSize: props.theme.tooltipTitleFontSize,
      fontWeight: props.theme.tooltipTitleFontWeight,
      padding: getPadding(props),
      textAlign: 'left',
      verticalAlign: 'top'
    }
  }, props.title) : null, React.createElement("table", {
    style: {
      width: '100%',
      borderCollapse: 'collapse'
    }
  }, React.createElement("tbody", null, (0, _map2.default)(props.values, function (d, i) {
    return row(props, d, i);
  }))));
};

TooltipInner.propTypes = process.env.NODE_ENV !== "production" ? {
  theme: _propTypes.default.object,
  title: _propTypes.default.string,
  values: _propTypes.default.array
} : {};
TooltipInner.defaultProps = {
  theme: _defaultTheme.default,
  showKeys: false
};

function Tooltip(props) {
  var tooltipData = (0, _extractTooltipData.default)(props.layerProps, props.hoverData);
  return React.createElement(TooltipInner, Object.assign({
    showKeys: props.layerProps.tooltipShowKeys,
    theme: props.theme
  }, tooltipData));
}

Tooltip.propTypes = process.env.NODE_ENV !== "production" ? {
  hoverData: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
  layerProps: _propTypes.default.object,
  theme: _propTypes.default.object
} : {};