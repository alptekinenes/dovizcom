"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/builtin/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/inheritsLoose"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _defaults = require("../chartCore/defaults");

var _basicRender = _interopRequireDefault(require("./basicRender"));

// Copyright 2018 Kensho Technologies, LLC.

/**
 * Component create a Canvas and use the renderData for drawing geometries on it.
 * The renderData follows a specific format.
 */
var CanvasRender =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(CanvasRender, _React$Component);

  function CanvasRender() {
    var _temp, _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_temp = _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this, _this.handleCanvasRef = function (canvasNode) {
      _this.canvasNode = canvasNode;
    }, _temp) || (0, _assertThisInitialized2.default)(_this);
  }

  var _proto = CanvasRender.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.handleUpdate(this.props);
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.renderData !== nextProps.renderData) {
      this.handleUpdate(nextProps);
    }

    if (this.props.renderLayers !== nextProps.renderLayers) {
      this.handleUpdate(nextProps);
    }
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (this.props.width !== nextProps.width || this.props.height !== nextProps.height) return true;
    return false;
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.handleUpdate(this.props);
  };

  _proto.handleUpdate = function handleUpdate(props) {
    var ctx = this.canvasNode.getContext('2d');
    ctx.save();
    ctx.scale(2, 2);
    this.props.render(props, ctx);
    ctx.restore();
  };

  _proto.render = function render() {
    return React.createElement("canvas", {
      height: this.props.height * 2,
      ref: this.handleCanvasRef,
      style: {
        display: 'block',
        position: 'absolute',
        width: this.props.width,
        height: this.props.height
      },
      width: this.props.width * 2
    });
  };

  return CanvasRender;
}(React.Component);

exports.default = CanvasRender;
CanvasRender.defaultProps = {
  render: _basicRender.default,
  width: _defaults.WIDTH,
  height: _defaults.HEIGHT,
  theme: _defaultTheme.default
};
CanvasRender.propTypes = process.env.NODE_ENV !== "production" ? {
  clip: _propTypes.default.bool,
  height: _propTypes.default.number,
  plotRect: _propTypes.default.object,
  render: _propTypes.default.func,
  renderData: _propTypes.default.array,
  renderLayers: _propTypes.default.array,
  theme: _propTypes.default.object,
  width: _propTypes.default.number
} : {};